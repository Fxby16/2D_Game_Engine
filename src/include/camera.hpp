#pragma once

#include <structs.hpp>
#include <fontmanager.hpp>

class Camera{
public:
    Camera();
    ~Camera()=default;

    /**
     * Initialize RENDERER and TEXT_RENDERER projection matrices
    */
    void InitializeProj();

    /**
     * Set the projection matrix for RENDERER to draw the scene framebuffer
    */
    void DrawSceneProj();

    /**
     * Set the projection matrix for RENDERER. It's the one generated by InitializeProj
    */
    void ResetSceneProj();  

    inline glm::mat4 GetViewMatrix() const{ return m_View; }
    inline glm::mat4 GetProjMatrix() const{ return m_Proj; }

    /**
     * Set the camera position. 
     * The function expects coordinates in engine units (screen width = 10 units).
     * \param pos the new position
    */
    void SetPosition(Vec2 pos);

    /**
     * Move the camera position.
     * The function expects coordinates in engine units (screen width = 10 units).
     * \param x_offset the x offset
     * \param y_offset the y offset
    */
    void Move(float x_offset,float y_offset);

    /**
     * Set the zoom level.
     * Currently the zoom level is clamped between 0.1 and 3.0.
     * \param zoom the new zoom level
    */
    void SetZoom(float zoom);

    /**
     * Change the zoom level.
     * Currently the zoom level is clamped between 0.1 and 3.0.
     * \param zoom_offset the zoom offset
    */
    void Zoom(float zoom_offset);

    /**
     * Set the camera rotation angle.
     * \param rotation Angle in degrees
    */
    void SetRotation(float rotation);

    /**
     * Rotate the camera.
     * \param rotation_offset Angle offset in degrees
    */
    void Rotate(float rotation_offset);

    /**
     * Get the camera position.
     * \return the camera position
    */
    inline Vec2 GetPosition() const{ return m_Position; }

    /**
     * Get the zoom level.
     * \return the zoom level
    */
    inline float GetZoom() const{ return m_Zoom; }

    /**
     * Get the camera rotation angle.
     * \return the camera rotation angle
    */
    inline float GetRotation() const{ return m_Rotation; }
private:
    Vec2 m_Position;
    float m_Zoom;
    float m_Rotation;

    glm::mat4 m_View;
    glm::mat4 m_Proj;
    glm::mat4 m_ViewProj;
};